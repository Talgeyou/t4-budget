datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?    @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    incomes       Income[]
    expenses      Expense[]
    incomeTags    IncomeTag[]
    expenseTags   ExpenseTag[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

enum Currency {
    KGS @map("kgs")
    USD @map("usd")
    RUB @map("rub")
    EUR @map("eur")
}

enum Period {
    ONCE    @map("once")
    DAILY   @map("daily")
    WEEKLY  @map("weekly")
    MONTHLY @map("monthly")
    YEARLY  @map("yearly")
}

model IncomeTag {
    id      String        @id @default(cuid())
    label   String
    user    User          @relation(fields: [userId], references: [id])
    userId  String        @map("user_id")
    color   String
    incomes TagOnIncome[]
}

model TagOnIncome {
    id       String    @id @default(cuid())
    tag      IncomeTag @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    tagId    String    @map("tag_id")
    income   Income    @relation(fields: [incomeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    incomeId String    @map("income_id")
}

model Income {
    id          String        @id @default(cuid())
    title       String
    description String?
    tags        TagOnIncome[]
    currency    Currency
    value       Float
    period      Period
    user        User          @relation(fields: [userId], references: [id])
    userId      String        @map("user_id")
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @default(now()) @map("updated_at")

    @@map("incomes")
}

model ExpenseTag {
    id       String         @id @default(cuid())
    label    String
    user     User           @relation(fields: [userId], references: [id])
    userId   String         @map("user_id")
    color    String
    expenses TagOnExpense[]
}

model TagOnExpense {
    id        String     @id @default(cuid())
    tag       ExpenseTag @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    tagId     String     @map("tag_id")
    expense   Expense    @relation(fields: [expenseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    expenseId String     @map("expense_id")
}

model Expense {
    id          String         @id @default(cuid())
    title       String
    description String?
    tags        TagOnExpense[]
    currency    Currency
    value       Float
    period      Period
    user        User           @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime       @default(now()) @map("created_at")
    updatedAt   DateTime       @default(now()) @map("updated_at")

    @@map("expenses")
}
